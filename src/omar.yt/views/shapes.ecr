<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/pure-min.css">
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/grids-responsive-min.css">
    <script type="text/javascript" src="/js/three.js"></script>
    <script type="text/javascript" src="/js/WebGL.js"></script>
    <script type="text/javascript" src="/js/OrbitControls.js"></script>
    <style>
    canvas {
        width: 100%;
    }
    pre {
        background: #f8f8f8;
        overflow: auto;
        tab-size: 4;
        display: block;
        padding: 0.5em;
    }
    </style>
</head>

<body>
<div class="pure-g">
    <div class="pure-u-1 pure-u-md-8-24">
        <pre oninput="update();" spellcheck="false" contenteditable="true" id="input"># You can comment like this<div>a(t) = max(|cos(t)|, |sin(t)|)</div><div><br></div></pre>
    </div>
    <div class="pure-u-1 pure-u-md-16-24">
        <canvas id="canvas">
        </canvas>
        <script>
            if ( WEBGL.isWebGLAvailable() === false ) {
                document.body.appendChild( WEBGL.getWebGLErrorMessage() );
            }

            var camera, scene, renderer;
            var geometry = new THREE.Geometry();
            var material = new THREE.PointsMaterial({size: 0.01});
            var particles = new THREE.Points(geometry, material);

            var canvas = document.getElementById("canvas");
            var canvasDimensions = canvas.getBoundingClientRect();
            scene = new THREE.Scene();

            init();
            animate();

            function init() {
                renderer = new THREE.WebGLRenderer( { antialias: true, canvas: canvas } );
                renderer.setPixelRatio( window.devicePixelRatio );
                renderer.setSize( canvasDimensions.width, window.innerHeight - 10 );

                // camera

                camera = new THREE.PerspectiveCamera( 40, canvasDimensions.width / (window.innerHeight - 10), 1, 1000 );
                camera.position.set( 5, 5, 5 );
                scene.add( camera );

                // controls
                
                var controls = new THREE.OrbitControls( camera, renderer.domElement );
                // controls.minDistance = 20;
                // controls.maxDistance = 50;
                controls.maxPolarAngle = Math.PI;

                scene.add( new THREE.AmbientLight( 0x222222 ) );
                
                // light

                var light = new THREE.PointLight( 0xffffff, 1 );
                camera.add( light );

                // helpers

                scene.add( new THREE.AxesHelper( 20 ) );
                window.addEventListener( 'resize', onWindowResize, false );

                scene.add(particles);
            }


            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();

                renderer.setSize( window.innerWidth, window.innerHeight );
            }
            
            function animate() {
                requestAnimationFrame( animate );
                renderer.render( scene, camera );
            };
            
            function scaleToFit (container, node) {
            var rect = container.getBoundingClientRect();
                node.width = rect.width;
                node.height = rect.height;
            }

            function update() {
                var xhr = new XMLHttpRequest();
                xhr.responseType = "json";

                xhr.open("POST", "/shapes/update", true);
                var input = document.getElementById("input");

                xhr.send(JSON.stringify({input: input.innerHTML}));

                xhr.onreadystatechange = function() {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            geometry.dispose();
                            material.dispose();
                            renderer.dispose();
                            scene.remove(particles);
                            window.eval(xhr.response["generated_js"]);
                        }
                    }
                }
            };
        </script>
    </div>
</div>

</body>

</html>